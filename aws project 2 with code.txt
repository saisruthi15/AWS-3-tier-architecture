To create a serverless web application using AWS services like Lambda, DynamoDB, Route 53, CloudFront, and S3, we’ll break down the process into multiple steps. Below is a guide to help you set up such an application. The application will allow users to create, read, update, and delete (CRUD) items in a DynamoDB table.

### Prerequisites:
- An AWS account.
- AWS CLI installed and configured on your local machine.
- Node.js or any server-side technology you're comfortable with (we'll use Node.js for Lambda).
- AWS SDK (for interacting with DynamoDB).

### Step-by-Step Guide

---

### 1. **Set Up DynamoDB**

1. **Create a DynamoDB Table**
   - Go to the DynamoDB service on AWS Management Console.
   - Create a new table, for example, `ItemsTable`.
     - Partition key: `ItemID` (String)
     - Sort key: `CreatedAt` (String, optional)
   - Set Read and Write capacity or enable Auto Scaling based on expected load.

---

### 2. **Create Lambda Functions**

You will need four Lambda functions: Create, Read, Update, Delete. These will handle CRUD operations for the DynamoDB table.

1. **Create Lambda Functions**
   - Go to AWS Lambda on the console and create new Lambda functions for each of the following:
     - `CreateItem`
     - `ReadItem`
     - `UpdateItem`
     - `DeleteItem`

2. **Write Lambda Code** (Using Node.js)
   Here’s an example of how you can implement the functions.

   - **CreateItem Lambda (Create)**:

     ```js
     const AWS = require('aws-sdk');
     const dynamoDb = new AWS.DynamoDB.DocumentClient();

     exports.handler = async (event) => {
       const { ItemID, Name, Description } = JSON.parse(event.body);
       const timestamp = new Date().toISOString();

       const params = {
         TableName: 'ItemsTable',
         Item: {
           ItemID,
           Name,
           Description,
           CreatedAt: timestamp
         }
       };

       try {
         await dynamoDb.put(params).promise();
         return {
           statusCode: 201,
           body: JSON.stringify({ message: 'Item created successfully' }),
         };
       } catch (error) {
         return {
           statusCode: 500,
           body: JSON.stringify({ error: 'Could not create item' }),
         };
       }
     };
     ```

   - **ReadItem Lambda (Read)**:

     ```js
     const AWS = require('aws-sdk');
     const dynamoDb = new AWS.DynamoDB.DocumentClient();

     exports.handler = async (event) => {
       const { ItemID } = event.pathParameters;

       const params = {
         TableName: 'ItemsTable',
         Key: { ItemID }
       };

       try {
         const result = await dynamoDb.get(params).promise();
         if (!result.Item) {
           return { statusCode: 404, body: JSON.stringify({ message: 'Item not found' }) };
         }

         return {
           statusCode: 200,
           body: JSON.stringify(result.Item),
         };
       } catch (error) {
         return {
           statusCode: 500,
           body: JSON.stringify({ error: 'Could not retrieve item' }),
         };
       }
     };
     ```

   - **UpdateItem Lambda (Update)**:

     ```js
     const AWS = require('aws-sdk');
     const dynamoDb = new AWS.DynamoDB.DocumentClient();

     exports.handler = async (event) => {
       const { ItemID } = event.pathParameters;
       const { Name, Description } = JSON.parse(event.body);

       const params = {
         TableName: 'ItemsTable',
         Key: { ItemID },
         UpdateExpression: 'set Name = :name, Description = :description',
         ExpressionAttributeValues: {
           ':name': Name,
           ':description': Description
         },
         ReturnValues: 'ALL_NEW'
       };

       try {
         const result = await dynamoDb.update(params).promise();
         return {
           statusCode: 200,
           body: JSON.stringify(result.Attributes),
         };
       } catch (error) {
         return {
           statusCode: 500,
           body: JSON.stringify({ error: 'Could not update item' }),
         };
       }
     };
     ```

   - **DeleteItem Lambda (Delete)**:

     ```js
     const AWS = require('aws-sdk');
     const dynamoDb = new AWS.DynamoDB.DocumentClient();

     exports.handler = async (event) => {
       const { ItemID } = event.pathParameters;

       const params = {
         TableName: 'ItemsTable',
         Key: { ItemID }
       };

       try {
         await dynamoDb.delete(params).promise();
         return {
           statusCode: 200,
           body: JSON.stringify({ message: 'Item deleted successfully' }),
         };
       } catch (error) {
         return {
           statusCode: 500,
           body: JSON.stringify({ error: 'Could not delete item' }),
         };
       }
     };
     ```

3. **IAM Role Permissions**:
   - Make sure your Lambda functions have the necessary permissions to interact with DynamoDB.
   - You can attach an IAM policy that gives the Lambda functions the necessary permissions (e.g., `dynamodb:PutItem`, `dynamodb:GetItem`, `dynamodb:UpdateItem`, `dynamodb:DeleteItem`).

---

### 3. **Create API Gateway**

1. **Create API Gateway**
   - Go to Amazon API Gateway and create a new REST API.
   - Create resources for each operation (CRUD) like `/create`, `/read/{ItemID}`, `/update/{ItemID}`, `/delete/{ItemID}`.
   
2. **Integrate Lambda Functions with API Gateway**
   - For each resource, create methods (GET, POST, PUT, DELETE) and link each method to its respective Lambda function.
   - Enable CORS if you want the web application to be publicly accessible via browsers.

---

### 4. **Deploy the API**

Once you've set up all the routes in API Gateway:

1. Deploy the API to a new or existing stage.
2. You’ll get an endpoint URL for your API that you can use to interact with the Lambda functions.

---

### 5. **Set Up S3 for Front-End**

1. **Create an S3 Bucket**:
   - Create an S3 bucket and configure it to host a static website. Enable static website hosting and set up an index file (e.g., `index.html`).

2. **Deploy Front-End Code**:
   - Create a simple front-end using HTML, CSS, and JavaScript.
   - Use the `fetch` API to call your API Gateway endpoints for CRUD operations.
   - Example for creating an item via a POST request:

     ```javascript
     function createItem() {
       fetch('https://your-api-id.execute-api.us-east-1.amazonaws.com/dev/create', {
         method: 'POST',
         body: JSON.stringify({
           ItemID: '123',
           Name: 'Sample Item',
           Description: 'This is a sample item'
         }),
         headers: { 'Content-Type': 'application/json' }
       })
       .then(response => response.json())
       .then(data => alert(data.message))
       .catch(error => console.error('Error:', error));
     }
     ```

3. **Upload Front-End to S3**:
   - Upload your front-end files to the S3 bucket.

---

### 6. **Set Up CloudFront for CDN (Optional)**

1. **Create CloudFront Distribution**:
   - Set up CloudFront to serve your S3 static website with a custom domain (optional).
   - This improves performance by caching the static assets.

2. **Configure CloudFront with S3**:
   - Set S3 as the origin and configure the distribution settings (CORS, caching, etc.).
   - CloudFront will provide a CDN URL for your front-end.

---

### 7. **Configure Route 53 (Optional)**

1. **Custom Domain Setup**:
   - If you have a domain, you can use Route 53 to point it to your CloudFront distribution or S3 bucket URL.
   - Create a hosted zone in Route 53 and set up an A record to point to your CloudFront distribution.

---

### Conclusion

Now you have a fully serverless web application where users can create, read, update, and delete items in a DynamoDB table using AWS Lambda, API Gateway, and a front-end hosted in S3. Route 53 and CloudFront can be used for custom domains and CDN, respectively.

Would you like more details on any specific part of this?